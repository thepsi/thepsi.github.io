{"version":3,"sources":["bt.js","TempTable.js","CurrentView.js","HistoryView.js","App.js","serviceWorker.js","index.js"],"names":["sensorNames","getTemp","v","offset","t","getInt16","getHumidity","val","getUint8","makeReading","name","temperature","humidity","BluetoothClient","this","gatt_","characteristics_","dataHandler_","currentReadingPromises_","currentReadingResolves_","i","length","push","Promise","resolve","reject","readyForCommandsPromise_","readyForCommandsResolve_","prototype","handleCharacteristicChanged_","e","c","target","value","uuid","console","log","hour","hourOffset","connect","options","filters","optionalServices","navigator","bluetooth","requestDevice","then","d","gatt","server","batteryPromise","getPrimaryService","s","getCharacteristic","startNotifications","addEventListener","weatherPromise","getCharacteristics","promises","forEach","properties","indicate","notify","all","fetchCurrentReadings","fetchHistory","channel","dataResolve","dataPromise","data","point","Int8Array","of","writeValue","race","ms","id","setTimeout","clearTimeout","catch","disconnect","useStyles","makeStyles","table","minWidth","makeRow","sensor","TempTable","props","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","rows","map","row","key","scope","CircularProgress","a","readings","reading","CurrentView","React","useState","setRows","Button","variant","onClick","fetchTemperatures","newRows","setStatusMessage","addDataset","colours","fillColours","HistoryView","statusMessage","datasets","setData","newDatasets","now","moment","sensorName","points","newData","p","x","clone","add","startOf","y","label","fill","pointRadius","borderColor","backgroundColor","spanGaps","scales","xAxes","type","time","unit","TabPanel","children","index","Typography","role","hidden","Box","App","setValue","Fragment","CssBaseline","AppBar","position","Tabs","onChange","newValue","Tab","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c5bf7fd2.chunk.js","sourcesContent":["let WEATHER_SERVICE = '74e7fe00-c6a4-11e2-b7a9-0002a5d5c51b';\nlet BATTERY_SERVICE = 'battery_service';\nlet BATTERY_LEVEL = \"battery_level\";\nlet COMMAND = '74e78e03-c6a4-11e2-b7a9-0002a5d5c51b';\nlet LOGGER_DATA = '74e78e04-c6a4-11e2-b7a9-0002a5d5c51b';\nlet INDOOR_AND_CH1_TO_3_TH_DATA = '74e78e10-c6a4-11e2-b7a9-0002a5d5c51b';\nlet CH_4_TO_7_TH_DATA = '74e78e14-c6a4-11e2-b7a9-0002a5d5c51b';\nlet PRESSURE_DATA = '74e78e20-c6a4-11e2-b7a9-0002a5d5c51b';\nlet TYPE_0 = 0x01;\n\nexport const sensorNames = [\n\t'Base station',\n\t'Channel 1',\n\t'Channel 2',\n\t'Channel 3',\n\t'Channel 4',\n\t'Channel 5',\n];\n\n// getTemp parses and returns the temperature at a given offset in the supplied\n// DataView.\nvar getTemp = function(v, offset) {\n\tlet t = v.getInt16(offset, true);\n\tif (t === 32767) {\n\t\treturn null;\n\t}\n\treturn t / 10;\n};\n\n// getHumidity parses and returns the humidity at a given offset in the\n// supplied DataView.\nvar getHumidity = function(v, offset) {\n\tlet val = v.getUint8(offset);\n\tif (val === 127) {\n\t\treturn null;\n\t}\n\treturn val;\n};\n\nfunction makeReading(name, temperature, humidity) {\n\treturn { name, temperature, humidity };\n}\n\nexport function BluetoothClient() {\n\tthis.gatt_ = null;\n\tthis.characteristics_ = {};\n\tthis.dataHandler_ = null;\n\tthis.currentReadingPromises_ = [];\n\tthis.currentReadingResolves_ = [];\n\tfor (let i = 0; i < sensorNames.length; i++) {\n\t\tthis.currentReadingPromises_.push(new Promise((resolve, reject) => {\n\t\t\tthis.currentReadingResolves_.push(resolve);\n\t\t}));\n\t}\n\tthis.readyForCommandsPromise_ = new Promise((resolve, reject) => {\n\t\tthis.readyForCommandsResolve_ = resolve;\n\t});\n}\n\nBluetoothClient.prototype.handleCharacteristicChanged_ = function(e) {\n\tlet c = e.target;\n\tlet v = c.value;\n\tif (c.uuid === INDOOR_AND_CH1_TO_3_TH_DATA) {\n\t\tlet type = v.getUint8(0);\n\t\tif (type === TYPE_0) {\n\t\t\tthis.currentReadingResolves_[0](makeReading(sensorNames[0], getTemp(v, 1), getHumidity(v, 9)));\n\t\t\tthis.currentReadingResolves_[1](makeReading(sensorNames[1], getTemp(v, 3), getHumidity(v, 10)));\n\t\t\tthis.currentReadingResolves_[2](makeReading(sensorNames[2], getTemp(v, 5), getHumidity(v, 11)));\n\t\t\tthis.currentReadingResolves_[3](makeReading(sensorNames[3], getTemp(v, 7), getHumidity(v, 12)));\n\t\t}\n\t} else if(c.uuid === CH_4_TO_7_TH_DATA) {\n\t\tlet type = v.getUint8(0);\n\t\tif (type === TYPE_0) {\n\t\t\tthis.currentReadingResolves_[4](makeReading(sensorNames[4], getTemp(v, 1), getHumidity(v, 9)));\n\t\t\tthis.currentReadingResolves_[5](makeReading(sensorNames[5], getTemp(v, 3), getHumidity(v, 10)));\n\t\t}\n\t} else if (c.uuid === PRESSURE_DATA) {\n\t\t// Experimentally the device seems to ignore our request for history if\n\t\t// we don't wait for this notification. I may have got this wrong - might\n\t\t// need to wait for *all* initial notifications (including battery?) or\n\t\t// (*sigh*) add a sleep() somewhere.\n\t\tconsole.log(\"Device is ready for commands\");\n\t\tthis.readyForCommandsResolve_();\n\t} else if (c.uuid === LOGGER_DATA) {\n\t\tif (this.dataHandler_ === null) {\n\t\t\t// nobody has registered to receive these; likely a bug or very late data\n\t\t\treturn;\n\t\t}\n\t\tlet hour = 1-v.getUint8(1);\n\t\tthis.dataHandler_({ hourOffset: hour, temperature: getTemp(v, 2) });\n\t\tthis.dataHandler_({ hourOffset: hour - 1, temperature: getTemp(v, 5) });\n\t\tthis.dataHandler_({ hourOffset: hour - 2, temperature: getTemp(v, 8) });\n\t\tthis.dataHandler_({ hourOffset: hour - 3, temperature: getTemp(v, 11) });\n\t\tthis.dataHandler_({ hourOffset: hour - 4, temperature: getTemp(v, 14) });\n\t}\n};\n\n// connect connects to the device and registers to receive notifications for\n// all characteristics of the weather and battery services.\nBluetoothClient.prototype.connect = function() {\n\tlet options = {\n\t\tfilters: [{'services': [WEATHER_SERVICE]}],\n\t\toptionalServices: [BATTERY_SERVICE],\n\t};\n\treturn navigator.bluetooth.requestDevice(options)\n\t.then(d => {\n\t\treturn d.gatt.connect();\n\t})\n\t.then(server => {\n\t\tthis.gatt_ = server;\n\t\t// Connect to battery service.\n\t\tlet batteryPromise = this.gatt_.getPrimaryService(BATTERY_SERVICE)\n\t\t.then(s => s.getCharacteristic(BATTERY_LEVEL))\n\t\t.then(c => c.startNotifications())\n\t\t.then(c => c.addEventListener('characteristicvaluechanged', e => this.handleCharacteristicChanged_(e)));\n\t\t// Connect to weather service.\n\t\tlet weatherPromise = this.gatt_.getPrimaryService(WEATHER_SERVICE)\n\t\t.then(s => s.getCharacteristics())\n\t\t.then(c => {\n\t\t\tlet promises = [];\n\t\t\tc.forEach(c => {\n\t\t\t\tif (c.properties.indicate || c.properties.notify) {\n\t\t\t\t\tthis.characteristics_[c.uuid] = c;\n\t\t\t\t\tpromises.push(\n\t\t\t\t\t\tc.startNotifications()\n\t\t\t\t\t\t.then(c => c.addEventListener('characteristicvaluechanged', e => this.handleCharacteristicChanged_(e))));\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(promises);\n\t\t});\n\t\treturn Promise.all([batteryPromise, weatherPromise]);\n\t});\n};\n\n// fetchCurrentReadings returns a promise resolving to a list of readings (in\n// the form returned by makeReading).\nBluetoothClient.prototype.fetchCurrentReadings = function() {\n\treturn Promise.all(this.currentReadingPromises_);\n};\n\n// promiseTimeout returns a promise that rejects after a period of time.\nfunction promiseTimeout(ms) {\n\treturn new Promise((resolve, reject) => {\n\t\tlet id = setTimeout(() => {\n\t\t\tclearTimeout(id);\n\t\t\treject('Timed out in ' + ms + 'ms');\n\t\t}, ms);\n\t});\n}\n\n// fetchHistory returns a promise resolving to a list of historical data points\n// for the given channel index.\nBluetoothClient.prototype.fetchHistory = function(channel) {\n\tvar dataResolve = null;\n\tconst dataPromise = new Promise((resolve, reject) => {\n\t\tdataResolve = resolve;\n\t});\n\tconst data = [];\n\tconst expectedPoints = 170;\n\tthis.dataHandler_ = point => {\n\t\tdata.push(point);\n\t\t//console.log(\"Got point:\", point, \"total:\", data.length);\n\t\tif (data.length >= expectedPoints) {\n\t\t\tdataResolve();\n\t\t}\n\t};\n\treturn this.readyForCommandsPromise_\n\t.then(() => {\n\t\tconsole.log(\"Requesting history for channel:\", channel);\n\t\tif (channel > 0) {\n\t\t\tchannel += 15;\n\t\t}\n\t\tconst v = Int8Array.of(-127, channel, -1);\n\t\treturn this.characteristics_[COMMAND].writeValue(v);\n\t})\n\t// sometimes the device sends partial data; just do what we can\n\t.then(() => Promise.race([dataPromise, promiseTimeout(10000)]))\n\t.catch(e => console.log(\"Failed:\", e, \"; got\", data.length, \"of the expected\", expectedPoints, \"points\"))\n\t.then(() => {\n\t\tthis.dataHandler_ = null;\n\t\treturn data;\n\t});\n};\n\n// disconnect disconnects from the GATT server.\nBluetoothClient.prototype.disconnect = function() {\n\tthis.characteristics_ = {};\n\tthis.gatt_.disconnect();\n\tthis.gatt_ = null;\n};\n","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n\ttable: {\n\t\tminWidth: 650,\n\t},\n});\n\nexport function makeRow(sensor, temperature, humidity) {\n  return { sensor, temperature, humidity };\n}\n\nexport function TempTable(props) {\n  const classes = useStyles();\n\treturn (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Sensor</TableCell>\n            <TableCell align=\"right\">Temperature (C)</TableCell>\n            <TableCell align=\"right\">Humidity (%)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.rows.map((row) => (\n            <TableRow key={row.sensor}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.sensor}\n              </TableCell>\n\t\t\t\t\t\t\t<TableCell align=\"right\">\n\t\t\t\t\t\t\t\t{row.temperature === \"spin\"\n\t\t\t\t\t\t\t\t\t? <CircularProgress />\n\t\t\t\t\t\t\t\t\t: row.temperature}\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell align=\"right\">\n\t\t\t\t\t\t\t\t{row.humidity === \"spin\"\n\t\t\t\t\t\t\t\t\t? <CircularProgress />\n\t\t\t\t\t\t\t\t\t: row.humidity}\n\t\t\t\t\t\t\t</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n\t);\n}\n","import React from 'react';\n\nimport { Button } from '@material-ui/core';\n\nimport { BluetoothClient } from './bt';\nimport { TempTable, makeRow } from './TempTable';\n\nasync function fetchTemperatures() {\n\tlet c = new BluetoothClient();\n\tawait c.connect();\n\tlet readings = await c.fetchCurrentReadings();\n\tlet rows = [];\n\treadings.forEach(reading => {\n\t\trows.push(makeRow(reading.name, reading.temperature, reading.humidity));\n\t});\n\tc.disconnect();\n\treturn rows;\n}\n\nexport default function CurrentView() {\n\tconst [rows, setRows] = React.useState([\n\t\tmakeRow('No data yet', null, null),\n\t]);\n\tconst handleClickFetch = e => {\n\t\tsetRows([\n\t\t\tmakeRow('Loading...', 'spin', 'spin'),\n\t\t]);\n\t\tfetchTemperatures()\n\t\t.then(newRows => {\n\t\t\tsetRows(newRows);\n\t\t})\n\t\t.catch(e => {\n\t\t\tsetRows([\n\t\t\t\tmakeRow('Error: ' + e, null, null),\n\t\t\t]);\n\t\t});\n\t};\n\treturn (\n\t\t<>\n\t\t\t<Button variant=\"contained\" onClick={handleClickFetch}>Fetch current readings</Button>\n\t\t\t<TempTable rows={rows} />\n\t\t</>\n\t);\n}\n\n","import React from 'react';\n\nimport moment from 'moment';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Line } from 'react-chartjs-2';\nimport { Button } from '@material-ui/core';\n\nimport { BluetoothClient, sensorNames } from './bt';\n\n// fetchHistory fetches data for all channels.\nasync function fetchHistory(setStatusMessage, addDataset) {\n\tlet c = new BluetoothClient();\n\tsetStatusMessage(\"Connecting to device\");\n\tawait c.connect();\n\tfor (let i = 0; i < sensorNames.length; i++) {\n\t\tsetStatusMessage(\"Fetching data for sensor: \" + sensorNames[i]);\n\t\tlet data = await c.fetchHistory(i);\n\t\taddDataset(sensorNames[i], data);\n\t}\n\tsetStatusMessage(\"Disconnecting\");\n\tc.disconnect();\n};\n\nconst colours = ['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00','#ffff33'];\nconst fillColours = ['#700e0f','#1b3e59','#285926','#4c2752','#803e00','#80801a'];\n\nexport default function HistoryView(props) {\n\tconst [statusMessage, setStatusMessage] = React.useState(\"\");\n\tconst [data, setData] = React.useState({datasets: []});\n\tconst handleClickFetch = e => {\n\t\tsetStatusMessage(\"Initialising client library\");\n\t\tlet newDatasets = [];\n\t\tsetData({datasets: newDatasets});\n\t\tconst now = moment();\n\t\tconst addDataset = (sensorName, points) => {\n\t\t\tconst newData = [];\n\t\t\tpoints.forEach(p => {\n\t\t\t\tnewData.push({x: now.clone().add(p.hourOffset, 'hours').startOf('hour'), y: p.temperature});\n\t\t\t});\n\t\t\tnewDatasets.push({\n\t\t\t\tlabel: sensorName,\n\t\t\t\tdata: newData,\n\t\t\t\tfill: false,\n\t\t\t\tpointRadius: 2,\n\t\t\t\tborderColor: colours[newDatasets.length % colours.length],\n\t\t\t\tbackgroundColor: fillColours[newDatasets.length % colours.length],\n\t\t\t\t// TODO: investigate whether this is working properly\n\t\t\t\tspanGaps: false,\n\t\t\t});\n\t\t\tsetData({datasets: newDatasets});\n\t\t};\n\t\tfetchHistory(setStatusMessage, addDataset)\n\t\t.then(() => {\n\t\t\tsetStatusMessage(\"\");\n\t\t});\n\t};\n\tconst options = {\n\t\tscales: {\n\t\t\txAxes: [{\n\t\t\t\ttype: 'time',\n\t\t\t\ttime: {\n\t\t\t\t\tunit: 'day',\n\t\t\t\t},\n\t\t\t}],\n\t\t},\n\t};\n\treturn (\n\t\t<>\n\t\t<Button variant=\"contained\" onClick={handleClickFetch}>Fetch last 7 days</Button>\n\t\t{statusMessage && <div><CircularProgress />{statusMessage}</div>}\n\t\t<Line options={options} data={data} />\n\t\t</>\n\t);\n}\n","import React from 'react';\nimport './App.css';\n\nimport CurrentView from './CurrentView';\nimport HistoryView from './HistoryView';\n\nimport { AppBar, Box, Tab, Tabs, Typography } from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nfunction TabPanel(props) {\n\tconst { children, value, index } = props;\n\treturn (\n\t\t<Typography component=\"div\" role=\"tabpanel\" hidden={value !== index}>\n\t\t\t{value === index && <Box>{children}</Box>}\n\t\t</Typography>\n\t);\n}\n\nfunction App() {\n\tconst [value, setValue] = React.useState(0);\n\tconst handleChange = (e, newValue) => {\n\t\tsetValue(newValue);\n\t};\n\treturn (\n\t\t<React.Fragment>\n\t\t  <CssBaseline />\n\t\t\t<div className=\"App\">\n\t\t\t\t<AppBar position=\"static\">\n\t\t\t\t\t<Tabs value={value} onChange={handleChange}>\n\t\t\t\t    <Tab label=\"Current\" />\n\t\t\t\t\t\t<Tab label=\"History\" />\n\t\t\t\t\t</Tabs>\n\t\t\t\t</AppBar>\n\t\t\t\t<TabPanel value={value} index={0}>\n\t\t\t\t\t<CurrentView />\n\t\t\t\t</TabPanel>\n\t\t\t\t<TabPanel value={value} index={1}>\n\t\t\t\t\t<HistoryView />\n\t\t\t\t</TabPanel>\n\t\t\t</div>\n\t\t</React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}